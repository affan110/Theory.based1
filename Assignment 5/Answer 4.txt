Q.4 how can you handle Async code in JavaScript ?

Handling asynchronous code in JavaScript can be achieved through various techniques. One common approach is to use callbacks, promises, or async/await syntax. These mechanisms allow you to write code that can perform time-consuming tasks without blocking the execution of other code.

Callbacks involve passing a function as an argument to another function, which will be called once the asynchronous operation completes. While callbacks can be effective, they often lead to callback hell and make the code harder to read and maintain.

Promises provide a more structured way to handle asynchronous operations. A promise represents the eventual completion or failure of an asynchronous task and allows you to chain operations using the .then() and .catch() methods. Promises provide better readability and error handling compared to callbacks.

Async/await is a syntax introduced in ECMAScript 2017, which builds upon promises and simplifies the handling of asynchronous code. By using the async keyword before a function declaration, you can define an asynchronous function. Within an asynchronous function, the await keyword is used to pause the execution until a promise is resolved or rejected.